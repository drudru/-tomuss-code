#!/bin/sh
# -*- sh -*-
# This script do a remote backup on a git repository.
#
# The remote account must be empty, its GIT configuration will be modified.
#
# Set a value for BACKUP_USER in '~/.profile' as 'login@hostname.example.org'
#
# On the local host:
#    * Do an rsync on $BACKUP_USER
# On the remote host:
#    * Do a git commit on an HOUR/DAY/MONTH/YEAR repository (only one)
#    * Do a git cleanup if necessary when reaching 672 commits (in background)
#      Keep only the 336 newer commits, the others are merged.

H=672 # Maximum number of commit allowed

log() {
    echo "___$(date +%H:%M:%S)___ $*" >&2
}

do_is_backup_needed() {
    log "Do I Need a $I commit?"
    export GIT_DIR="$(pwd)/TOMUSS_$I/.git"
    export GIT_WORK_TREE="$(pwd)/TOMUSS_DB/"
    git log --date=iso8601 --max-count=1 2>/dev/null \
         | grep "^Date" \
         | sed 's/[-:]/ /g' \
         >xxx
    read Date YEAR MONTH DAY HOUR MINUTE <xxx
    rm xxx
    log "GIT last commit: $YEAR-$MONTH-$DAY"

    case "$I" in
    YEAR)  return $(expr "$YEAR"  = "$(date +%Y)") ;;
    MONTH) return $(expr "$MONTH" = "$(date +%m)") ;;
    DAY)   return $(expr "$DAY"   = "$(date +%d)") ;;
    HOUR)  return 0 ;;
    *)     log "BUG"
	   exit 1
    esac
}

do_commit() {
    log "Do commit $I"
    git add --all "$GIT_WORK_TREE"
    ERRORS="$ERRORS add:$?"
    git commit -a -m "Backup $I '$(date +%Y-%m-%d_%H:%M:%S)'"
    # XXX Error on empty commit
    # ERRORS="$ERRORS commit:$?"
}

do_cleanup() {
    if [ ! -f "$GIT_DIR"/last_gc ]
    then
	echo 0 >"$GIT_DIR"/last_gc
    fi
    DT=$(expr "$(date +%s)" - "$(cat "$GIT_DIR"/last_gc)")
    if [ "$DT" -le 864000 ]
    then
	# Do a cleanup only once for 10 days
	return
    fi
    date +%s >"$GIT_DIR"/last_gc

    if [ "$(git log --oneline | wc --lines)" -ge "$H" ]
    then
        log "Keep only $H/2 commits of $1"
	git rev-list --all | sed -n "$(expr $H / 2)p" >"$GIT_DIR"/info/grafts
	if [ ! -d "$HOME/git-rewrite" ] ; then mkdir "$HOME/git-rewrite" ; fi
	(cd "$GIT_WORK_TREE" ;
	 git filter-branch -d "$HOME/git-rewrite" -f -- --all)
	rm -rf "$HOME/git-rewrite"
	rm "$GIT_DIR"/info/grafts
    fi
    log "Run the garbage collector."
    git gc
}

do_decimate_editor() {
    log "Fake text editor for decimate:$1 $2"
    while read A
    do
	echo "$A"
	head -"$1" | sed 's/^pick/f/'
    done <"$2" >xxx && mv xxx "$2"
}

do_decimate() {
    log "Merge $1 commits together"
    export GIT_EDITOR="$0 DO_DECIMATE_EDITOR $1"
    git rebase --interactive "$(git rev-list HEAD | tail -n 1)"
}

do_config_git() {
    log "Configure GIT"
    git config --global user.email "backup@user.name"
    git config --global user.name "backup user"
}

do_create_repository() {
    log "Check GIT repository $I"
    if [ ! -d "TOMUSS_$1" ]
    then
	log "Create GIT repository $I"
	mkdir "TOMUSS_$1"
	(
	    cd "TOMUSS_$1"
	    unset GIT_DIR GIT_WORK_TREE
	    git init
	    git config --global gc.auto 0
	)
    fi
}

do_backup() {
    do_config_git
    for I in YEAR MONTH DAY HOUR
    do
	do_create_repository "$I"
	if do_is_backup_needed "$I"
	then
	    do_commit "$I"
	    do_cleanup "$I"
            log "Do not make the other backups"
	    break
	fi
    done
}

do_rsync() {
    log "Do rsync DB"
    rsync --archive --no-g --delete \
        --exclude '*.bak' \
        --exclude '*.pyc' \
        --exclude '*~' \
        --verbose \
        DB/. "$BACKUP_USER:TOMUSS_DB"
    ERRORS="$ERRORS rsync:$?"
    log "Do rsync UPLOAD (never delete)"
    rsync --archive --no-g --verbose --exclude '*~' \
	  UPLOAD/. "$BACKUP_USER:UPLOAD"
    ERRORS="$ERRORS rsync:$?"
}

do_main() {
    if [ -f xxx.hour_job ]
    then
	log "hour_job.py is yet running, let it finish the previous job."
	exit 1
    fi
    date >xxx.hour_job
    log "================================================================"
    log $(date)
    log "================================================================"
    if [ "" = "$BACKUP_USER" ]
    then
	log "No hourly backup, you need to put in $HOME/.profile :"
	log 'export BACKUP_USER="backuplogin@hostname.example.org"'
	exit 1
    fi
    scp "$0" "$BACKUP_USER":hour_job
    case "$BACKUP_USER" in
	*"@$(hostname)")
	    # Assume that the DB is readeable by the $BACKUP_USER
	    # No need to copy it.
	    ssh "$BACKUP_USER" "[ -L TOMUSS_DB ] && rm TOMUSS_DB
                                [ -d TOMUSS_DB ] && mv TOMUSS_DB TOMUSS_DB.old
                                ln -s $(pwd)/DB TOMUSS_DB"
	;;
	*)
	    do_rsync
	    ERRORS="$ERRORS scp:$?"
	    ;;
    esac
    ssh "$BACKUP_USER" 'chmod 755 hour_job
                        ionice -c Idle nice $HOME/hour_job RUN'
    ERRORS="$ERRORS ssh:$?"
    rm xxx.hour_job
}

case "$1" in
    "") do_main ;;
    "RUN") do_backup ;;
    "DO_DECIMATE") do_decimate "$2" ;;
    "DO_DECIMATE_EDITOR") shift ; do_decimate_editor "$@" ;;
esac

case "$ERRORS" in
    *[1-9]*)
	if [ -d SCRIPTS ]
	then
	    SCRIPTS/alert_mail.py "BUG in hour job" "
Look at LOGS/xxx_crontab_1h

ERRORS=$ERRORS
"
	else
	    echo "ERRORS = $ERRORS" >&2
	    exit 1
	fi
	;;
esac

exit 0
